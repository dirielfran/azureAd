/**
 * =============================================================================
 * üìã APP MODULE - CONFIGURACI√ìN PRINCIPAL DE ANGULAR CON MICROSOFT ENTRA ID
 * =============================================================================
 * 
 * Este m√≥dulo configura la integraci√≥n completa entre Angular y Microsoft Entra ID
 * usando la biblioteca MSAL (Microsoft Authentication Library).
 * 
 * FUNCIONALIDADES PRINCIPALES:
 * ‚úÖ Autenticaci√≥n autom√°tica con Microsoft Entra ID
 * ‚úÖ Interceptor que agrega tokens JWT autom√°ticamente a las peticiones HTTP
 * ‚úÖ Guards para proteger rutas
 * ‚úÖ Configuraci√≥n de scopes y recursos protegidos
 * ‚úÖ Manejo de redirecciones despu√©s del login
 * 
 * CREDENCIALES CONFIGURADAS:
 * - Client ID: 4a12fbd8-bf63-4c12-be4c-9678b207fbe7
 * - Tenant ID: f128ae87-3797-42d7-8490-82c6b570f832
 * - API Scope: api://4a12fbd8-bf63-4c12-be4c-9678b207fbe7/access_as_user
 * 
 * @author Sistema de Autenticaci√≥n Angular-Entra
 * @version 1.0.0
 * =============================================================================
 */

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ProtectedDataComponent } from './components/protected-data.component';
import { AccessDeniedComponent } from './components/access-denied.component';
import { UserPermissionsComponent } from './components/user-permissions.component';

// Importar servicios de autorizaci√≥n
import { AuthorizationService } from './services/authorization.service';

// Importar guards
import { PermissionGuard, AdminGuard, ManagerGuard } from './guards/permission.guard';

// Importar directivas
import { 
  HasPermissionDirective, 
  IsAdminDirective, 
  IsManagerDirective 
} from './directives/has-permission.directive';

// Importaciones de MSAL para Microsoft Entra ID
import { 
  MsalModule, 
  MsalRedirectComponent, 
  MsalGuard, 
  MsalInterceptor,
  MsalService, 
  MSAL_INSTANCE, 
  MSAL_GUARD_CONFIG, 
  MSAL_INTERCEPTOR_CONFIG, 
  MsalGuardConfiguration, 
  MsalInterceptorConfiguration 
} from '@azure/msal-angular';

import { 
  IPublicClientApplication, 
  PublicClientApplication, 
  InteractionType 
} from '@azure/msal-browser';

import { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import { environment } from '../environments/environment';

/**
 * =============================================================================
 * üè≠ FACTORY FUNCTIONS - CONFIGURACI√ìN DE MSAL
 * =============================================================================
 */

/**
 * üèóÔ∏è MSAL INSTANCE FACTORY
 * 
 * Crea la instancia principal de MSAL usando la configuraci√≥n del environment.
 * Esta instancia maneja toda la autenticaci√≥n con Microsoft Entra ID.
 * 
 * CONFIGURACI√ìN INCLUIDA:
 * - Client ID de tu aplicaci√≥n registrada en Azure AD
 * - Authority (URL del tenant de Azure AD)
 * - Redirect URI (donde regresar despu√©s del login)
 * - Cache configuration (localStorage para persistir tokens)
 * 
 * @returns {IPublicClientApplication} Instancia de MSAL configurada
 */
export function MSALInstanceFactory(): IPublicClientApplication {
  return new PublicClientApplication(environment.msalConfig);
}


/**
 * üõ°Ô∏è MSAL GUARD CONFIGURATION FACTORY
 * 
 * Configura el guard de MSAL que protege rutas y define qu√© scopes solicitar
 * cuando un usuario necesita autenticarse.
 * 
 * SCOPES CONFIGURADOS:
 * - 'user.read': Permiso b√°sico para leer el perfil del usuario desde Microsoft Graph
 * - 'api://4a12fbd8-bf63-4c12-be4c-9678b207fbe7/access_as_user': 
 *   Permiso personalizado para acceder a tu API Spring Boot
 * 
 * INTERACTION TYPE:
 * - Redirect: El usuario ser√° redirigido a Microsoft para autenticarse
 *   (alternativa ser√≠a Popup, pero Redirect es m√°s confiable)
 * 
 * @returns {MsalGuardConfiguration} Configuraci√≥n del guard de MSAL
 */
export function MSALGuardConfigFactory(): MsalGuardConfiguration {
  return {
    interactionType: InteractionType.Redirect,
    authRequest: {
      scopes: [
        'user.read', // Microsoft Graph - Perfil b√°sico del usuario
        'api://4a12fbd8-bf63-4c12-be4c-9678b207fbe7/access_as_user' // Tu API Spring Boot
      ]
    }
  };
}

/**
 * üîÑ MSAL INTERCEPTOR CONFIGURATION FACTORY
 * 
 * ¬°ESTA ES LA MAGIA! ü™Ñ
 * 
 * Configura el interceptor de MSAL que AUTOM√ÅTICAMENTE agrega el header
 * "Authorization: Bearer <token>" a todas las peticiones HTTP que coincidan
 * con las URLs configuradas en el protectedResourceMap.
 * 
 * C√ìMO FUNCIONA:
 * 1. Cuando haces una petici√≥n HTTP a una URL protegida
 * 2. El interceptor intercepta la petici√≥n
 * 3. Obtiene el token de acceso apropiado seg√∫n los scopes
 * 4. Agrega el header Authorization autom√°ticamente
 * 5. Env√≠a la petici√≥n con el token incluido
 * 
 * RECURSOS PROTEGIDOS CONFIGURADOS:
 * - Microsoft Graph API: https://graph.microsoft.com/v1.0/me ‚Üí ['user.read']
 * - Tu API Spring Boot: http://localhost:8080/api ‚Üí ['api://...../access_as_user']
 * 
 * VENTAJAS:
 * ‚úÖ No necesitas manejar tokens manualmente
 * ‚úÖ Renovaci√≥n autom√°tica de tokens
 * ‚úÖ Manejo de errores integrado
 * ‚úÖ F√°cil agregar nuevas APIs
 * 
 * @returns {MsalInterceptorConfiguration} Configuraci√≥n del interceptor
 */
export function MSALInterceptorConfigFactory(): MsalInterceptorConfiguration {
  // Mapa que define qu√© URLs necesitan qu√© scopes
  const protectedResourceMap = new Map<string, Array<string>>();
  
  // üìä Microsoft Graph API - Para obtener perfil de usuario
  protectedResourceMap.set('https://graph.microsoft.com/v1.0/me', ['user.read']);
  
  // üöÄ Tu API Spring Boot protegida - CONFIGURACI√ìN PRINCIPAL
  // Cualquier petici√≥n a http://localhost:8080/api/* incluir√° autom√°ticamente el token
  protectedResourceMap.set('http://localhost:8080/api', ['api://4a12fbd8-bf63-4c12-be4c-9678b207fbe7/access_as_user']);
  
  // üîß Ejemplo para agregar m√°s APIs (descomenta y personaliza seg√∫n necesites)
  // protectedResourceMap.set('https://otra-api.com/api', ['scope1', 'scope2']);
  // protectedResourceMap.set('https://mi-segunda-api.com', ['api://mi-app/read']);

  return {
    interactionType: InteractionType.Redirect,
    protectedResourceMap
  };
}

/**
 * =============================================================================
 * üéØ ANGULAR MODULE - CONFIGURACI√ìN PRINCIPAL DE LA APLICACI√ìN
 * =============================================================================
 */

@NgModule({
  /**
   * üì¶ DECLARACIONES - Componentes que pertenecen a este m√≥dulo
   */
  declarations: [
    AppComponent,              // Componente principal con navegaci√≥n y login/logout
    ProtectedDataComponent,    // Componente de demostraci√≥n para probar APIs protegidas
    AccessDeniedComponent,     // Componente para mostrar errores de acceso denegado
    UserPermissionsComponent,  // Componente para mostrar permisos del usuario
    // Directivas personalizadas
    HasPermissionDirective,    // Directiva para renderizado condicional por permisos
    IsAdminDirective,         // Directiva para contenido solo de administradores
    IsManagerDirective        // Directiva para contenido de gestores
  ],
  
  /**
   * üì• IMPORTS - M√≥dulos que esta aplicaci√≥n necesita
   */
  imports: [
    BrowserModule,       // M√≥dulo base para aplicaciones que corren en el navegador
    CommonModule,        // Directivas comunes de Angular (ngIf, ngFor, etc.)
    AppRoutingModule,    // Configuraci√≥n de rutas de la aplicaci√≥n
    HttpClientModule,    // Cliente HTTP para hacer peticiones a APIs
    MsalModule          // M√≥dulo de MSAL para autenticaci√≥n con Microsoft
  ],
  
  /**
   * üîß PROVIDERS - Servicios y configuraciones inyectables
   */
  providers: [
    /**
     * üîÑ HTTP INTERCEPTOR - MsalInterceptor
     * 
     * Este interceptor es la CLAVE de todo el sistema:
     * - Se ejecuta en TODAS las peticiones HTTP
     * - Agrega autom√°ticamente tokens de autorizaci√≥n
     * - Usa la configuraci√≥n de MSALInterceptorConfigFactory
     * - multi: true permite m√∫ltiples interceptors
     */
    {
      provide: HTTP_INTERCEPTORS,
      useClass: MsalInterceptor,
      multi: true
    },
    
    /**
     * üèóÔ∏è MSAL INSTANCE - Instancia principal de autenticaci√≥n
     * 
     * Proporciona la instancia configurada de PublicClientApplication
     * que maneja toda la comunicaci√≥n con Microsoft Entra ID
     */
    {
      provide: MSAL_INSTANCE,
      useFactory: MSALInstanceFactory
    },
    
    /**
     * üõ°Ô∏è MSAL GUARD CONFIG - Configuraci√≥n del guard de rutas
     * 
     * Define c√≥mo comportarse cuando una ruta protegida requiere autenticaci√≥n:
     * - Qu√© scopes solicitar
     * - Tipo de interacci√≥n (redirect/popup)
     */
    {
      provide: MSAL_GUARD_CONFIG,
      useFactory: MSALGuardConfigFactory
    },
    
    /**
     * üîÑ MSAL INTERCEPTOR CONFIG - Configuraci√≥n del interceptor HTTP
     * 
     * Define qu√© URLs est√°n protegidas y qu√© scopes necesitan:
     * - Mapa de URLs ‚Üí Scopes
     * - Configuraci√≥n de comportamiento del interceptor
     */
    {
      provide: MSAL_INTERCEPTOR_CONFIG,
      useFactory: MSALInterceptorConfigFactory
    },
    
    // üîß Servicios de MSAL
    MsalService,    // Servicio principal para operaciones de autenticaci√≥n
    MsalGuard,      // Guard para proteger rutas que requieren autenticaci√≥n
    
    // üõ°Ô∏è Servicios y Guards de Autorizaci√≥n
    AuthorizationService,  // Servicio para gesti√≥n de permisos
    PermissionGuard,      // Guard para verificar permisos espec√≠ficos
    AdminGuard,           // Guard para acceso de administradores
    ManagerGuard          // Guard para acceso de gestores
  ],
  
  /**
   * üöÄ BOOTSTRAP - Componentes que se cargan al iniciar la aplicaci√≥n
   * 
   * - AppComponent: Componente principal de la aplicaci√≥n
   * - MsalRedirectComponent: Maneja las redirecciones de vuelta desde Microsoft
   */
  bootstrap: [AppComponent, MsalRedirectComponent]
})
export class AppModule { 
  
  /**
   * =============================================================================
   * üìù NOTAS IMPORTANTES PARA DESARROLLO
   * =============================================================================
   * 
   * üîë FLUJO DE AUTENTICACI√ìN:
   * 1. Usuario hace clic en "Iniciar sesi√≥n"
   * 2. Se ejecuta loginRedirect() ‚Üí Redirecci√≥n a Microsoft
   * 3. Usuario se autentica en Microsoft
   * 4. Microsoft redirige de vuelta con c√≥digo de autorizaci√≥n
   * 5. MsalRedirectComponent procesa la respuesta
   * 6. Tokens se guardan autom√°ticamente en localStorage
   * 7. MsalInterceptor agrega tokens a peticiones HTTP autom√°ticamente
   * 
   * üîß PERSONALIZACI√ìN:
   * - Para agregar nuevas APIs: Modifica MSALInterceptorConfigFactory
   * - Para cambiar scopes: Modifica MSALGuardConfigFactory
   * - Para cambiar configuraci√≥n: Modifica environment.ts
   * 
   * üêõ DEBUGGING:
   * - Tokens se muestran en console.log autom√°ticamente
   * - Usa el bot√≥n "Ver Token de Acceso" en ProtectedDataComponent
   * - Revisa Network tab para ver headers Authorization
   * 
   * üìö DOCUMENTACI√ìN:
   * - MSAL Angular: https://github.com/AzureAD/microsoft-authentication-library-for-js
   * - Azure AD: https://docs.microsoft.com/en-us/azure/active-directory/develop/
   * 
   * =============================================================================
   */
}